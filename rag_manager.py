from langchain_openai import OpenAIEmbeddings
from langchain_openai import ChatOpenAI
from langchain.retrievers.multi_query import MultiQueryRetriever
from langchain.chains import create_history_aware_retriever, create_retrieval_chain
from langchain.chains.combine_documents import create_stuff_documents_chain
from langchain_core.chat_history import BaseChatMessageHistory
from langchain_community.chat_message_histories import ChatMessageHistory
from langchain_core.runnables.history import RunnableWithMessageHistory
from langchain_chroma import Chroma
from langchain_core.prompts import ChatPromptTemplate, MessagesPlaceholder
from langchain_core.documents.base import Document

import pandas as pd

from config import load_config
import logging
load_config()

# retrieve parsed pdf and htmls docs from df pkl
try:
    docs_df = pd.read_pickle("./data/docs_13_pdf_htmls_df.pkl")
    docs = [Document(page_content=row["text"], metadata=row["metadata"]) for index, row in docs_df.iterrows()]
except Exception as e:
    logging.error(f"Failed to load documents: {str(e)}")

# setup chroma vector store
try:
    llm = ChatOpenAI(model="gpt-3.5-turbo")

    vectordb = Chroma.from_documents(documents=docs, embedding=OpenAIEmbeddings(model="text-embedding-ada-002"))
    retriever = MultiQueryRetriever.from_llm(retriever=vectordb.as_retriever(), llm=llm)
except Exception as e:
    logging.error(f"Failed to setup vector store and retriever: {str(e)}")

# setup llm prompting
try:
    prompt_template = """You are an healthcare assistant...
    Question: {question}
    Context: {context}
    Answer:"""
    prompt = ChatPromptTemplate.from_template(prompt_template)

    llm = ChatOpenAI(model="gpt-3.5-turbo")
except Exception as e:
    logging.error(f"Failed to setup OpenAI LLM: {str(e)}")


# setup rag
try:
    # contextualize the question
    contextualize_q_system_prompt = """Given a chat history and the latest user question \
    which might reference context in the chat history, formulate a standalone question \
    which can be understood without the chat history. Do NOT answer the question, \
    just reformulate it if needed and otherwise return it as is."""
    contextualize_q_prompt = ChatPromptTemplate.from_messages(
        [
            ("system", contextualize_q_system_prompt),
            MessagesPlaceholder("chat_history"),
            ("human", "{input}"),
        ]
    )
    history_aware_retriever = create_history_aware_retriever(
        llm, retriever, contextualize_q_prompt
    )

    # question answer prompt
    qa_system_prompt = """You are a compassionate and considerate healthcare assistant for question-answering tasks. \
    If you don't know the answer, just say that you don't know in a sympathetic manner, and base your responses solely on the information derived from the context. \
    Be empathetic, considerate and concise in your responses. \

    context: {context}"""
    qa_prompt = ChatPromptTemplate.from_messages(
        [
            ("system", qa_system_prompt),
            MessagesPlaceholder("chat_history"),
            ("human", "{input}"),
        ]
    )
    question_answer_chain = create_stuff_documents_chain(llm, qa_prompt)

    rag_chain = create_retrieval_chain(history_aware_retriever, question_answer_chain)

    # statefully manage chat history
    store = {}


    def get_session_history(session_id: str) -> BaseChatMessageHistory:
        """
            Retrieves chat message history for a given session ID, creating a new history if not present.

            Args:
                session_id (str): The unique identifier for the session.

            Returns:
                BaseChatMessageHistory: The chat message history associated with the session ID.

            """
        if session_id not in store:
            store[session_id] = ChatMessageHistory()
        return store[session_id]


    conversational_rag_chain = RunnableWithMessageHistory(
        rag_chain,
        get_session_history,
        input_messages_key="input",
        history_messages_key="chat_history",
        output_messages_key="answer",
    )

except Exception as e:
    logging.error(f"Failed to setup rag: {str(e)}")
def get_response(user_input):
    """
    Returns a response based on user input using Conversational RAG (Rapid Automatic Generalization).

    Args:
        user_input (str): The input text from the user.

    Returns:
        dict: The response generated by Conversational RAG.

    """

    result = conversational_rag_chain.invoke({"input": user_input}, config={"configurable": {"session_id": "abc123"}},)
    return result